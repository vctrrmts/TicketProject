version: '3.4'

services:
  redis:
   image: redis
   logging:
      driver: none 
   ports:
      - "6379:6379"


  rabbitmq:
   image: rabbitmq:3.13.2-management
   logging:
      driver: none
   hostname: my-rabbit
   environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
   ports:
      - "15672:15672"


  mssql:
    container_name: sql-server
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: unless-stopped
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "0bd7903b-f568-4894-8d72-3c1b507e5644"
    ports:
      - "1433:1433"


  proxy:
    container_name: proxy_container
    image: nginx:mainline
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    restart: unless-stopped
    ports:
      - "80:80"


  ticketsearch.api:
    image: ${DOCKER_REGISTRY-}ticketeventsearchapi
    build:
      context: .
      dockerfile: TicketEventSearchService/TicketEventSearch.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8080"


  authorization.api:
    image: ${DOCKER_REGISTRY-}authorizationapi
    build:
      context: .
      dockerfile: AuthorizationService/Authorization.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"


  usersmanagement.api:
    image: ${DOCKER_REGISTRY-}usersmanagementapi
    build:
      context: .
      dockerfile: UsersManagementService/UsersManagement.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8083:8080"


  ticketmanagement.api:
    image: ${DOCKER_REGISTRY-}ticketeventmanagementapi
    build:
      context: .
      dockerfile: TicketEventManagementService/TicketEventManagement.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8084:8080"


  ticketbuying.api:
    image: ${DOCKER_REGISTRY-}ticketbuyingapi
    build:
      context: .
      dockerfile: TicketBuyingService/TicketBuying.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8085:8080"


  notification.api:
    image: ${DOCKER_REGISTRY-}notificationapi
    build:
      context: .
      dockerfile: NotificationService/Notification.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8086:8080"
       

  ticketcontrol.api:
    image: ${DOCKER_REGISTRY-}ticketcontrolserviceapi
    build:
      context: .
      dockerfile: TicketControlService/TicketControlService.API/Dockerfile
    restart: unless-stopped
    ports:
      - "8087:8080"


  sendingmailbymq:
    image: ${DOCKER_REGISTRY-}sendingmailbymq
    build:
      context: .
      dockerfile: TicketBuyingService/SendingMailByMq/Dockerfile


  eventnotifyapp:
    image: ${DOCKER_REGISTRY-}eventnotifyapp
    build:
      context: .
      dockerfile: NotificationService/EventNotifyApp/Dockerfile

